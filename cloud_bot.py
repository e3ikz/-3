#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞–∫–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GitHub Actions + webhook –¥–ª—è 24/7 —Ä–∞–±–æ—Ç—ã
"""

import os
import json
import time
import logging
import requests
from typing import Dict, Optional, Set
from datetime import datetime, timedelta
from threading import Thread
import signal
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("7063629673:AAH14qV3jFQ6LDtOLBwZs0-wyniZJ59lhxU", "")
ADMIN_USER_ID = int(os.getenv("5028276712", "0")) if os.getenv("ADMIN_USER_ID") else None
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")  # URL –¥–ª—è webhook
KEEP_ALIVE_URL = os.getenv("KEEP_ALIVE_URL", "")  # URL –¥–ª—è keep-alive

# –•—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
message_mappings: Dict[int, Dict] = {}
admin_users: Set[int] = {ADMIN_USER_ID} if ADMIN_USER_ID else set()
blocked_users: Set[int] = set()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# Keep-alive —Å–∏—Å—Ç–µ–º–∞
class KeepAlive:
    def __init__(self):
        self.running = True
        self.thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ keep-alive —Å–µ—Ä–≤–∏—Å–∞"""
        if KEEP_ALIVE_URL:
            self.thread = Thread(target=self._keep_alive_loop, daemon=True)
            self.thread.start()
            logger.info("üîÑ Keep-alive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ keep-alive —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.thread:
            self.thread.join()
    
    def _keep_alive_loop(self):
        """–¶–∏–∫–ª –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while self.running:
            try:
                response = requests.get(KEEP_ALIVE_URL, timeout=30)
                logger.debug(f"Keep-alive ping: {response.status_code}")
            except Exception as e:
                logger.warning(f"Keep-alive error: {e}")
            
            time.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
class SelfHealing:
    def __init__(self):
        self.error_count = 0
        self.max_errors = 50
        self.restart_count = 0
        
    def handle_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        self.error_count += 1
        logger.error(f"–û—à–∏–±–∫–∞ #{self.error_count}: {error}")
        
        if self.error_count >= self.max_errors:
            logger.critical("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫, —Å–∞–º–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            self.self_restart()
    
    def self_restart(self):
        """–°–∞–º–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.restart_count += 1
            logger.info(f"üîÑ –°–∞–º–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ #{self.restart_count}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_users:
                try:
                    send_message(admin_id, f"üîÑ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω #{self.restart_count}")
                except:
                    pass
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if WEBHOOK_URL:
                requests.post(WEBHOOK_URL, json={"action": "restart"}, timeout=10)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os._exit(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            os._exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
keep_alive = KeepAlive()
self_healing = SelfHealing()

def send_message(chat_id: int, text: str, reply_to_message_id: Optional[int] = None) -> Optional[Dict]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_to_message_id:
        data["reply_to_message_id"] = reply_to_message_id
    
    try:
        response = requests.post(url, json=data, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"API error {response.status_code}: {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        self_healing.handle_error(e)
        return None

def forward_message(from_chat_id: int, message_id: int, to_chat_id: int) -> Optional[Dict]:
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/forwardMessage"
    data = {
        "chat_id": to_chat_id,
        "from_chat_id": from_chat_id,
        "message_id": message_id
    }
    
    try:
        response = requests.post(url, json=data, timeout=30)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"API forward error {response.status_code}: {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        self_healing.handle_error(e)
        return None

def broadcast_to_all_users(text: str, admin_id: int) -> int:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    sent_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –º–∞–ø–ø–∏–Ω–≥–æ–≤
    user_ids = set()
    for mapping in message_mappings.values():
        user_ids.add(mapping['user_id'])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids:
        if user_id not in blocked_users and user_id not in admin_users:
            try:
                if send_message(user_id, text):
                    sent_count += 1
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    send_message(admin_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ {admin_id}: {sent_count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    
    return sent_count

def forward_to_admin(user_id: int, message_id: int) -> Optional[int]:
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in admin_users:
        result = forward_message(user_id, message_id, admin_id)
        if result:
            return result.get("result", {}).get("message_id")
    return None

def reply_to_user(user_id: int, text: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = send_message(user_id, text)
    return result is not None

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in admin_users

def is_blocked(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return user_id in blocked_users

def add_mapping(admin_message_id: int, user_id: int):
    """–î–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    message_mappings[admin_message_id] = {
        'user_id': user_id,
        'created_at': datetime.now()
    }
    cleanup_mappings()

def get_user_from_mapping(admin_message_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    mapping = message_mappings.get(admin_message_id)
    return mapping['user_id'] if mapping else None

def cleanup_mappings():
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏"""
    cutoff_time = datetime.now() - timedelta(hours=24)
    to_remove = []
    
    for msg_id, mapping in message_mappings.items():
        if mapping['created_at'] < cutoff_time:
            to_remove.append(msg_id)
    
    for msg_id in to_remove:
        del message_mappings[msg_id]

def handle_admin_commands(user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    if not is_admin(user_id):
        return
    
    parts = text.split()
    command = parts[0].lower()
    
    try:
        if command == "/addadmin" and len(parts) >= 2:
            new_admin_id = int(parts[1])
            admin_users.add(new_admin_id)
            send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã")
        
        elif command == "/removeadmin" and len(parts) >= 2:
            admin_id = int(parts[1])
            if admin_id == ADMIN_USER_ID:
                send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
            elif admin_id in admin_users:
                admin_users.remove(admin_id)
                send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤")
            else:
                send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
        
        elif command == "/block" and len(parts) >= 2:
            block_id = int(parts[1])
            if block_id in admin_users:
                send_message(user_id, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞")
            else:
                blocked_users.add(block_id)
                send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {block_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        elif command == "/unblock" and len(parts) >= 2:
            unblock_id = int(parts[1])
            if unblock_id in blocked_users:
                blocked_users.remove(unblock_id)
                send_message(user_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            else:
                send_message(user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        elif command == "/admins":
            admins_list = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in admin_users])
            send_message(user_id, f"üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_list}")
        
        elif command == "/blocked":
            if blocked_users:
                blocked_list = "\n".join([f"‚Ä¢ {blocked_id}" for blocked_id in blocked_users])
                send_message(user_id, f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_list}")
            else:
                send_message(user_id, "‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        elif command == "/panel":
            panel_text = """üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏:
/addadmin [ID] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/removeadmin [ID] - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

üö´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏:
/block [ID] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unblock [ID] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/blocked - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/panel - —ç—Ç–∞ –ø–∞–Ω–µ–ª—å

üì¢ –†–∞—Å—Å—ã–ª–∫–∞:
/broadcast [—Ç–µ–∫—Å—Ç] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ reply –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/logs - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
            send_message(user_id, panel_text)
        
        elif command == "/broadcast" and len(parts) >= 2:
            broadcast_text = " ".join(parts[1:])
            broadcast_to_all_users(broadcast_text, user_id)
        
        elif command == "/restart":
            send_message(user_id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º {user_id}")
            self_healing.self_restart()
        
        elif command == "/logs":
            try:
                if os.path.exists("bot.log"):
                    with open("bot.log", "r", encoding="utf-8") as f:
                        lines = f.readlines()
                        last_lines = lines[-10:] if len(lines) >= 10 else lines
                        log_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n" + "".join(last_lines)
                        if len(log_text) > 4000:
                            log_text = log_text[:4000] + "..."
                        send_message(user_id, log_text)
                else:
                    send_message(user_id, "üìã –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
                
    except ValueError:
        send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {command}: {e}")
        send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

def handle_message(update: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message = update.get("message", {})
    if not message:
        return
    
    user = message.get("from", {})
    user_id = user.get("id")
    text = message.get("text", "")
    message_id = message.get("message_id")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
    has_media = any(key in message for key in ["photo", "document", "video", "audio", "voice", "sticker"])
    
    if not user_id or (not text and not has_media):
        return
    
    if is_blocked(user_id):
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º
    if text:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:50]}...")
    else:
        logger.info(f"–ú–µ–¥–∏–∞ –æ—Ç {user_id}")
    
    if is_admin(user_id):
        reply_to = message.get("reply_to_message", {})
        if reply_to:
            # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            replied_message_id = reply_to.get("message_id")
            target_user_id = get_user_from_mapping(replied_message_id)
            
            if target_user_id:
                if has_media:
                    result = forward_message(user_id, message_id, target_user_id)
                    success = result is not None
                else:
                    success = reply_to_user(target_user_id, text)
                
                if success:
                    logger.info(f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ reply - –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
            if text and text.startswith("/"):
                handle_admin_commands(user_id, text)
            elif text or has_media:
                # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                if text:
                    broadcast_to_all_users(text, user_id)
                else:
                    send_message(user_id, "üì¢ –ú–µ–¥–∏–∞-—Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        forwarded_msg_id = forward_to_admin(user_id, message_id)
        if forwarded_msg_id:
            add_mapping(forwarded_msg_id, user_id)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∞–º")

def handle_command(update: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"""
    message = update.get("message", {})
    if not message:
        return
    
    text = message.get("text", "")
    user_id = message.get("from", {}).get("id")
    
    if is_blocked(user_id):
        return
    
    if text == "/start":
        welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É e3 | Wa

üî• –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–ê–ô–°:
1—á - 8$ 2—á - 14$ 3—á - 18$

–ß–¢–û –ë–´ –°–î–ê–¢–¨ –ù–û–ú–ï–† –ö–ò–î–ê–ô –ï–ì–û –°–Æ–î–ê üëá

‚ÄºÔ∏è –ù–û–ú–ï–† –ö–ò–î–ê–ô –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£ –ü–û–ö–ê –ù–ï –ù–ê–ü–ò–®–£–¢: –í-–≤–∑—è–ª!
(—Ç—É—Ç —Å–∏–¥—è—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ª—é–¥–∏ –∏ –±–µ—Ä—É—Ç –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞, —á–∞—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç –∏ –æ–Ω–∏ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –∑–∞–º–µ—á–∞—Ç—å –≤—Å–µ)"""
        send_message(user_id, welcome_text)
    
    elif text == "/help":
        if is_admin(user_id):
            help_text = """üìã –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:

üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /addadmin, /removeadmin, /admins
üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: /block, /unblock, /blocked  
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /status, /panel, /logs
üì¢ –†–∞—Å—Å—ã–ª–∫–∞: /broadcast –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç
üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: /restart"""
        else:
            help_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É e3 | Wa

üî• –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–ê–ô–°:
1—á - 8$ 2—á - 14$ 3—á - 18$

–ß–¢–û –ë–´ –°–î–ê–¢–¨ –ù–û–ú–ï–† –ö–ò–î–ê–ô –ï–ì–û –°–Æ–î–ê üëá

‚ÄºÔ∏è –ù–û–ú–ï–† –ö–ò–î–ê–ô –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£ –ü–û–ö–ê –ù–ï –ù–ê–ü–ò–®–£–¢: –í-–≤–∑—è–ª!
(—Ç—É—Ç —Å–∏–¥—è—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ª—é–¥–∏ –∏ –±–µ—Ä—É—Ç –≤–∞—à–∏ –Ω–æ–º–µ—Ä–∞, —á–∞—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ª–µ—Ç–∞–µ—Ç –∏ –æ–Ω–∏ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –∑–∞–º–µ—á–∞—Ç—å –≤—Å–µ)"""
        send_message(user_id, help_text)
    
    elif text == "/status" and is_admin(user_id):
        active_mappings = len(message_mappings)
        unique_users = len(set(mapping['user_id'] for mapping in message_mappings.values()))
        total_admins = len(admin_users)
        total_blocked = len(blocked_users)
        
        status_text = f"""üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

üë• –ê–¥–º–∏–Ω–æ–≤: {total_admins}
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {unique_users}
üì® –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤: {active_mappings}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_blocked}
üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {self_healing.restart_count}
üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ 24/7

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /panel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        send_message(user_id, status_text)
    
    elif text == "/panel" and is_admin(user_id):
        handle_admin_commands(user_id, text)

def get_updates(offset: int = 0) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    params = {"offset": offset, "timeout": 30}
    
    try:
        response = requests.get(url, params=params, timeout=35)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"API error {response.status_code}: {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        self_healing.handle_error(e)
        return None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    keep_alive.stop()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    for admin_id in admin_users:
        try:
            send_message(admin_id, "‚èπÔ∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        except:
            pass
    
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    if not BOT_TOKEN or not ADMIN_USER_ID:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_USER_ID")
        return
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
    logger.info(f"üë§ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω: {ADMIN_USER_ID}")
    logger.info("üîÑ –†–µ–∂–∏–º 24/7 —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
    keep_alive.start()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
    for admin_id in admin_users:
        try:
            send_message(admin_id, "üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ 24/7")
        except:
            pass
    
    offset = 0
    consecutive_errors = 0
    max_consecutive_errors = 5
    
    while True:
        try:
            updates = get_updates(offset)
            if not updates:
                consecutive_errors += 1
                if consecutive_errors >= max_consecutive_errors:
                    logger.warning("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞...")
                    time.sleep(10)
                    consecutive_errors = 0
                continue
            
            if not updates.get("ok"):
                logger.warning(f"‚ö†Ô∏è API –æ—à–∏–±–∫–∞: {updates.get('description')}")
                time.sleep(3)
                continue
            
            consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            for update in updates.get("result", []):
                try:
                    update_id = update.get("update_id")
                    
                    if "message" in update:
                        message = update["message"]
                        text = message.get("text", "")
                        
                        if text.startswith("/"):
                            handle_command(update)
                        else:
                            handle_message(update)
                    
                    offset = max(offset, update_id + 1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    continue
        
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            break
        except Exception as e:
            consecutive_errors += 1
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            if consecutive_errors >= max_consecutive_errors:
                logger.critical("üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
                self_healing.self_restart()
            
            time.sleep(5)
    
    keep_alive.stop()
    logger.info("üîö –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    main()
